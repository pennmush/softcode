@@ Some @functions for Rhost Compatability on PennMUSH
@@ Coded by Mike@M*U*S*H, 17/9/2016
@@ 
@@ Free for reuse or modification. 
@@ Upload to your MUSH as a Wizard to install.
@@
@@ Please submit fixes, additions or improvements to https://github.com/pennmush/softcode/
@@
@@ Functions added:
@@ bittype()
@@ between(), fbetween()
@@ caplist()
@@ chomp()
@@ lookup_site()
@@ mask()
@@ writable()
@@ wildmatch()

@create Rhost Compatability Functions (RCF)
@power RCF=Functions See_All
@startup RCF=@dol lattr(me/fun`*)=@function after(%i0,`)=me,%i0,v(%i0`min),v(%i0`max),v(%i0`restrict)

@@ This assumes you haven't redefined GOD in the hardcode. 
&fun`bittype RCF=switch(locate(%@,%0,N*),#-*,%$0,#1,7,cond(hasflag(%$0,wizard),6,hasflag(%$0,royalty),5,haspower(%$0,builder),3,haspower(%$0,guest),0,1))
&fun`bittype`min RCF=1
&fun`bittype`max RCF=2

@@ between(<small>,<big>,<value>[,<X-or-equal>])
&fun`between RCF=ufun(code`between,floor(%0),floor(%1),floor(%2),if(%3,,=))
&fun`between`min RCF=3
&fun`between`max RCF=4

@@ fbetween() is a floating-point version of between()
&fun`fbetween RCF=ufun(code`between,%0,%1,%2,if(%3,,=))
&fun`fbetween`min RCF=3
&fun`fbetween`max RCF=4

&code`between RCF=switch(%2,<%3%0,0,>%3%1,0,1)

@@ caplist(<list>[, <delim>[, <osep>[, <key>[, <type>]]]])
@@ If <key> is L, lcstr(<list>) before working on it. Other values ignored.
@@ If <type> is true and <key> is L or T, capitalise after hyphens.
&fun`caplist RCF=ufun(code`caplist,%0,%1,strfirstof(%2,%1,%b),switch(%3,L,L,N),switch(t(%4)%3,0*,0,1N,0,1))
&fun`caplist`min RCF=1
&fun`caplist`max RCF=5

&code`caplist RCF=map(#lambda/[if(%4,{map\(#lambda/capstr(%%%%0),%%0,-,-)},{capstr\(%%0)})],switch(%3,L,lcstr(%0),%0),%1,%2)

@@ chomp(<string>[, B|L|R])
&fun`chomp RCF=trimpenn(%0,%r,%1)
&fun`chomp`min RCF=1
&fun`chomp`max RCF=2

@@ lookup_site(<player>[, <port>[, <type>]])
@@ If type==1, show ipaddr(), else host()
&fun`lookup_site RCF=ncond(setr(0,locate(%@, %0, PFym)),#-1,cor(strmatch(%q0,%@),orlflags(%@,wizard royalty),haspower(%@,see_all)),#-1,strlen(%1),ufun(code`lookup_site,ports(%q0),if(%2,ipaddr,host)),member(ports(%q0),%1),#-1,ufun(code`lookup_site,%1,if(%2,ipaddr,host)))
&fun`lookup_site`min RCF=1
&fun`lookup_site`max RCF=3
&fun`lookup_site`restrict RCF=localize
&code`lookup_site RCF=map(#lambda/%1(%%0),%0)

@@ writable(<victim>, <obj>/<attr>)
&fun`writable RCF=t(controls(%0,%1))
&fun`writable`min RCF=2
&fun`writable`max RCF=2

@@ wildmatch(<list of patterns>, <string>[, <delim>])
&fun`wildmatch RCF=first(iter(%0,if(strmatch(%1,%i0),#@[ibreak()]),%2) 0)

@@ mask(<num1>, <num2>[, ... , <numX>, <masktype>])
@@ <masktype> = &, |, ^ or ~. Rhost also supports 1 and 2; this doesn't.
&fun`mask RCF=switch(%+,2,band(%0,%1),reswitch(setr(0,r(dec(%+),args)),^\[&\\|^\],lmath(switch(%q0,&,band,|,bor,^,bxor),iter(lnum(dec(%+)),r(%i0,args))),^~,fold(#lambda/bnand(%%0,%%1),iter(lnum(dec(%+)),r(%i0,args))),\[1|2\],#-1 OPERATION NOT SUPPORTED,lmath(band,iter(lnum(dec(%+)),r(%i0,args)))))
&fun`mask`min RCF=2
&fun`mask`restrict RCF=localize
